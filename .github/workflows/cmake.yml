name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    #Global Setup
    - name: arm-none-eabi-gcc GNU Arm Embedded Toolchain
      uses: carlosperate/arm-none-eabi-gcc-action@v1.5.2

    - name: Checkout GP2040-CE
      uses: actions/checkout@v2
    
    - name: Checkout submodules
      working-directory: ${{github.workspace}}
      run: git submodule update --init
    
    - name: Checkout pico-sdk/develop
      uses: actions/checkout@v2
      with:
        repository: raspberrypi/pico-sdk
        ref: develop
        path: pico-sdk
        
    - name: Checkout pico-sdk submodules
      working-directory: ${{github.workspace}}/pico-sdk
      run: git submodule update --init
    
    - name: Get core count
      id: core_count
      run : cat /proc/cpuinfo  | grep processor | wc -l
      #End Global Setup

    - name: Pico Build Configure CMake
      shell: bash
 
      run: cmake --help -version


    - name: Pico Build Configure CMake
      shell: bash
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: PICO_SDK_PATH=../pico-sdk GP2040_BOARDCONFIG=Pico cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Pico Build
      shell: bash
      # Build your program with the given configuration
      run: GP2040_BOARDCONFIG=Pico cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel ${{steps.core_count.outputs.output}}
    
    # #BentoBox
    - name: BentoBox Configure CMake
      shell: bash
      run: PICO_SDK_PATH=../pico-sdk GP2040_BOARDCONFIG=BentoBox cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
    
    - name: BentoBox Build
      shell: bash
      run: GP2040_BOARDCONFIG=BentoBox cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel ${{steps.core_count.outputs.output}} GP2040_BOARDCONFIG=set:BentoBox
    
    # #DURAL
    # - name: Configure CMake
    #   shell: bash
    #   # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    #   # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    #   run: PICO_SDK_PATH=../pico-sdk cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} --modify GP2040_BOARDCONFIG=set:DURAL
    
    # - name: Build
    #   shell: bash
    #   # Build your program with the given configuration
    #   run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel ${{steps.core_count.outputs.output}} --modify GP2040_BOARDCONFIG=set:DURAL

    # #FlatboxRev4
    # - name: Configure CMake
    #   shell: bash
    #   # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    #   # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    #   run: PICO_SDK_PATH=../pico-sdk cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} --modify GP2040_BOARDCONFIG=set:FlatboxRev4
    
    # - name: Build
    #   shell: bash
    #   # Build your program with the given configuration
    #   run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel ${{steps.core_count.outputs.output}} --modify GP2040_BOARDCONFIG=set:FlatBoxRev4

    # #FlatboxRev5
    # - name: Configure CMake
    #   shell: bash
    #   # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    #   # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    #   run: PICO_SDK_PATH=../pico-sdk cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} --modify GP2040_BOARDCONFIG=set:FlatboxRev5
    
    # - name: Build
    #   shell: bash
    #   # Build your program with the given configuration
    #   run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel ${{steps.core_count.outputs.output}} --modify GP2040_BOARDCONFIG=set:FlatBoxRev5

    # #PicoFightingBoard
    # - name: Configure CMake
    #   shell: bash
    #   # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    #   # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    #   run: PICO_SDK_PATH=../pico-sdk cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} --modify GP2040_BOARDCONFIG=set:PicoFightingBoard
    
    # - name: Build
    #   shell: bash
    #   # Build your program with the given configuration
    #   run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel ${{steps.core_count.outputs.output}} --modify GP2040_BOARDCONFIG=set:PicoFightingBoard
    
    # #SparkFunProMicro    
    # - name: Configure CMake
    #   shell: bash
    #   # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    #   # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    #   run: PICO_SDK_PATH=../pico-sdk cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} --modify GP2040_BOARDCONFIG=set:SparkFunProMicro
    
    # - name: Build
    #   shell: bash
    #   # Build your program with the given configuration
    #   run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel ${{steps.core_count.outputs.output}} --modify GP2040_BOARDCONFIG=set:SparkFunProMicro
    
    # #WaveshareZero
    # - name: Configure CMake
    #   shell: bash
    #   # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    #   # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    #   run: PICO_SDK_PATH=../pico-sdk cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} --modify GP2040_BOARDCONFIG=set:WaveshareZero
    
    # - name: Build
    #   shell: bash
    #   # Build your program with the given configuration
    #   run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --parallel ${{steps.core_count.outputs.output}} --modify GP2040_BOARDCONFIG=set:WaveShareZero    
    
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.1
      with:
        # Artifact name
        name: GP2040-CE
        # A file, directory or wildcard pattern that describes what to upload
        path: ${{github.workspace}}/build/GP2040-CE_*.uf2
        if-no-files-found: error
